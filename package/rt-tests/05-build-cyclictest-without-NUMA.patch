From bd857c346611331057773681d54fe95ed70772ec Mon Sep 17 00:00:00 2001
From: Tal Zilcer <talz@ezchip.com>
Date: Thu, 18 Jun 2015 19:13:33 +0300
Subject: [PATCH 1/1] build cyclictest even if NUMA is not defined


Signed-off-by: Tal Zilcer <talz@ezchip.com>
---
 Makefile                    |    4 ++--
 src/cyclictest/cyclictest.c |   28 ++++------------------------
 2 files changed, 6 insertions(+), 26 deletions(-)

diff --git a/Makefile b/Makefile
index b9a1fed..7ce72aa 100644
--- a/Makefile
+++ b/Makefile
@@ -3,10 +3,10 @@ VERSION_STRING = 0.89
 HAVE_NPTL ?= yes
 
 ifeq ($(HAVE_NPTL),yes)
-sources = cyclictest.c pi_stress.c pip_stress.c pmqtest.c rt-migrate-test.c
+sources = pi_stress.c pip_stress.c pmqtest.c rt-migrate-test.c
 endif
 
-sources += signaltest.c ptsematest.c sigwaittest.c svsematest.c sendme.c \
+sources += cyclictest.c signaltest.c ptsematest.c sigwaittest.c svsematest.c sendme.c \
 	  hackbench.c
 
 TARGETS = $(sources:.c=)
diff --git a/src/cyclictest/cyclictest.c b/src/cyclictest/cyclictest.c
index 343e421..0dca742 100644
--- a/src/cyclictest/cyclictest.c
+++ b/src/cyclictest/cyclictest.c
@@ -57,7 +57,7 @@
 #define gettid() syscall(__NR_gettid)
 #define sigev_notify_thread_id _sigev_un._tid
 
-#if defined(__UCLIBC__) && !defined(__UCLIBC_HAS_ADVANCED_REALTIME__)
+#ifdef __UCLIBC__
 #define MAKE_PROCESS_CPUCLOCK(pid, clock) \
 	((~(clockid_t) (pid) << 3) | (clockid_t) (clock))
 #define CPUCLOCK_SCHED          2
@@ -740,7 +740,6 @@ void *timerthread(void *param)
 	struct thread_stat *stat = par->stats;
 	int stopped = 0;
 	cpu_set_t mask;
-	pthread_t thread;
 
 	/* if we're running in numa mode, set our memory node */
 	if (par->node != -1)
@@ -749,8 +748,7 @@ void *timerthread(void *param)
 	if (par->cpu != -1) {
 		CPU_ZERO(&mask);
 		CPU_SET(par->cpu, &mask);
-		thread = pthread_self();
-		if(pthread_setaffinity_np(thread, sizeof(mask), &mask) == -1)
+		if(sched_setaffinity(0, sizeof(mask), &mask) == -1)
 			warn("Could not set CPU affinity to CPU #%d\n", par->cpu);
 	}
 
@@ -776,20 +774,7 @@ void *timerthread(void *param)
 	if (setscheduler(0, par->policy, &schedp))
 		fatal("timerthread%d: failed to set priority to %d\n", par->cpu, par->prio);
 
-	/* Get current time */
-	if(aligned){
-		pthread_barrier_wait(&globalt_barr);
-		if(par->tnum==0)
-			clock_gettime(par->clock, &globalt);
-		pthread_barrier_wait(&align_barr);
-		now = globalt;
-		if(offset) {
-			now.tv_nsec += offset * par->tnum;
-			tsnorm(&now);
-		}
-	}
-	else
-		clock_gettime(par->clock, &now);
+	clock_gettime(par->clock, &now);
 
 	next = now;
 	next.tv_sec += interval.tv_sec;
@@ -1494,11 +1479,6 @@ static void process_options (int argc, char *argv[], int max_cpus)
 	if (num_threads < 1)
 		error = 1;
 
-	if (aligned) {
-		pthread_barrier_init(&globalt_barr, NULL, num_threads);
-		pthread_barrier_init(&align_barr, NULL, num_threads);
-	}
-
 	if (error) {
 		if (affinity_mask)
 			rt_bitmask_free(affinity_mask);
@@ -1990,7 +1970,7 @@ int main(int argc, char **argv)
 				printf("Thread %d using cpu %d.\n", i,
 					par->cpu);
 			break;
-		case AFFINITY_USEALL: par->cpu = i % max_cpus; break;
+		case AFFINITY_USEALL: par->cpu = (i % (max_cpus-1)) + 1; break;
 		}
 		stat->min = 1000000;
 		stat->max = 0;
-- 
1.7.1

